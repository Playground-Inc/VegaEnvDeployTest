service: vega-deployment

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  architecture: arm64
  timeout: 10
  stage: ${file(./serverlessEnv.yml):BRANCH}
  deploymentBucket:
    name: vega-deployment-${aws:region}-${ternary( ${sls:stage}, prod, prod, dev )}
  profile: ${opt:aws-profile, "dev"} # ${file(./serverlessEnv.yml):AWS_PROFILE} # use --aws-profile dev / prod
  httpApi:
    name: ${self:service}-${sls:stage}
  environment:
    REDIS_HOST:
      Fn::GetAtt: [ElasticCacheCluster, RedisEndpoint.Address]
    DYNAMO_SFX: ${self:custom.dynamoSfx}
    BRANCH: ${sls:stage}
    SUB_DOMAIN: ${self:custom.subDomain}
    SUB_DOMAIN_API: ${self:custom.subDomainApi}

plugins:
  - serverless-dynamodb-local # sls dynamodb install Ã  faire avant
  - serverless-offline
  - serverless-vpc-plugin
  - serverless-plugin-utils

custom:
  generalStage: ${ternary( ${sls:stage}, prod, prod, dev )} # prod | dev
  subDomain: ${ternary( ${sls:stage}, prod, xxx, ${sls:stage}.dev )} #TODO xxx -> www
  subDomainApi: ${ternary(${sls:stage}, prod, api, ${sls:stage}-api.dev )}
  dynamoSfx: ${ternary(${sls:stage}, prod, "", _TEST${ternary(${file(./serverlessEnv.yml):CREATE_NEW_DB}, true, _${sls:stage}, "" )} )}
  elasticacheInstance: ${ternary( ${sls:stage}, prod, cache.m6g.large, cache.t2.micro )} # cache.m6g.large or cache.m6g.xlarge for prod
  vpcConfig:
    # if createNatGateway is a boolean "true", a NAT Gateway and EIP will be provisioned in each zone
    # if createNatGateway is a number, that number of NAT Gateways will be provisioned
    createNatGateway: ${ternary( ${sls:stage}, prod, 3, 1 )}
    subnetGroups:
      - elasticache
    exportOutputs: true
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - ${ternary( ${sls:stage}, prod, dev, ${sls:stage} )}
    start:
      docker: true
      port: 8001
      inMemory: true
      migrate: false
      seed: false
      convertEmptyValues: true

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi: ANY /hello

resources:
  - ${file(resources/Certificate.yml)}
  - ${file(resources/Cloudfront.yml)}
  - ${file(resources/Route53.yml)}
  - ${file(resources/DynamoDb.yml)}
  - ${file(resources/Vpc.yml)}
  - ${file(resources/Elasticache.yml)}
